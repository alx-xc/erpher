[
    {rabbit, [{tcp_listeners,[5672]}]}, % AMQP broker's default port
    {kernel, [
        {inet_default_listen_options, [{nodelay,true}]},
        {inet_default_connect_options, [{nodelay,true}]},
        {error_logger0, {file,"%ROOT%/var/log/erpher/rabbit-kernel.log"}}
    ]},
    {mnesia, [
        {dir, "%ROOT%/var/lib/erpher/mnesia/rabbit-erpher"}
    ]},
    {sasl, [
        {sasl_error_logger, {file,"%ROOT%/var/log/erpher/rabbit-sasl.log"}},
        {errlog_type, error},
        {error_logger_mf_dir, "%ROOT%/var/log/erpher/sasl"},      % Log directory
        {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
        {error_logger_mf_maxfiles, 5}           % 5 files max
    ]},
    {ejobman, [
        {temp_rt_key_for_group, <<"new">>},
        % log is common and may also be defined in eworkman
        {log0, "%ROOT%/var/log/erpher/ej"},
        {pid_file0, "/var/run/erpher/erpher.pid"},
        {debug, [
                {msg, 0},
                {json, 0},
                {config, 0},
                {job, 2},
                {run, 2}
        ]},
        {rabbit, [
                {port, 5672},
                {host, '127.0.0.1'},
                {user, <<"guest">>},
                {password, <<"guest">>},
                {vhost , <<"/">>},
                {exchange , <<"ejobman">>},
                {exchange_type0 , <<"topic">>},
                {queue , <<"test_queue_2">>},
                {routing_key , <<"new">>}
        ]},
        {estat, [
            {stat_limit_n, 101}, % amount
            {stat_limit_t, 123}, % seconds
            {stat_limit_cnt_h, 26}, % hours
            {stat_limit_cnt_m, 62}, % minutes
            {storage_base, "%ROOT%/var/lib/erpher/estat/es"},
            {rt_info_file, "%ROOT%/var/lib/erpher/rt_info.dat"},
            {keep_time, 72}, % hours
            {rotate_interval, hour},
            {flush_interval, 60}, % seconds
            {flush_number, 250}, % amount
            {log_procs_interval, 60}, % seconds
            {debug, [
                {stat, 4},
                {file, 2},
                {storage, 2},
                {run, 2}
            ]}
        ]},
        {group_handler, [
            {http_connect_timeout, 15001},
            {http_timeout, 3600001},
            {max_children, 2}, % default group
            {job_groups, [
                [
                    {name, <<"g1">>},
                    {max_children, 3}
                ],
                [
                    {name, <<"g2">>},
                    {max_children, 7}
                ],
                [
                    {name, <<"g3">>},
                    {max_children, 10}
                ]
            ]},
            {schema_rewrite, [
                [
                    {src_host_part, "test.megahost"},
                    % true - on, false - off, other - don't change
                    {https, false}
                ],
                [
                    {src_type, regex},
                    {src_host_part, ".+"},
                    % true - on, false - off, other - don't change
                    {https, true}
                ]
            ]},
            {url_rewrite, [
                [
                    {src_host_part, "host2.localdomain"},
                    {dst_host_part, "127.0.0.1"}
                ],
                [
                    {src_host_part, "mdt.megaplan"},
                    {dst_host_part, "192.168.9.183"}
                ],
                [
                    {src_host_part, "192.168.9.183"},
                    {dst_host_hdr, "promo.megaplan"}
                ],
                [
                    {src_host_part, "promo.megaplan"},
                    {dst_host_part, "192.168.9.183"},
                    {dst_host_hdr, "promo.megaplan"}
                ],
                [
                    {src_type, regex},
                    {src_host_part, "127\\.0\\.0\\.\\d+"},
                    {dst_host_part, "127.0.0.1"},
                    {dst_host_hdr, "host3.localdomain"}
                ],
                [
                    {src_type, regex},
                    {src_host_part, "127\\.\\d+\\.\\d+\\.\\d+"},
                    {dst_host_part, "127.0.0.2"},
                    {dst_host_hdr, "host2.localdomain"}
                ]
            ]},
            {debug, [
                    {handler_child, 2},
                    {handler_run, 2},
                    {handler_job, 2},
                    {msg, 2},
                    {run, 2},
                    {job, 4},
                    {job_result, 1},
                    {job_queue, 2},
                    {http, 3},
                    {config, 0},
                    {rewrite, 0}
            ]}
        ]},
        {handler, [
            {job_log0, "%ROOT%/var/log/erpher/job"},
            % never | minute | hour | day | {dow, 0..7} | month | year
            {job_log_rotate, day},
            {debug,
                [
                    {handler_child, 2},
                    {handler_run, 2},
                    {job, 4},
                    {job_result, 1},
                    {job_queue, 2},
                    {run, 2},
                    {stat, 2},
                    {http, 3},
                    {rewrite, 0}
                ]
            }
        ]}
    ]},
    {eworkman, [
        {local_config, "etc/local.config"},
        % which configs to reload and what process (module, in fact) to signal
        {apps, [
            {eworkman, [eworkman_handler]},
            {ejobman, [ejobman_handler, ejobman_receiver, ejobman_stat]},
            {ecomet, [ecomet_server]}
        ]},
        {delay_for_log0, 10}, % ms. Start delay for ejobman to create a log
        % log is common and may also be defined in ejobman
        {log, "%ROOT%/var/log/erpher/ew"},
        % never | minute | hour | day | {dow, 0..7} | month | year
        {log_rotate, day},
        {pid_file, "/var/run/erpher/erpher.pid"},
        {debug, [
                {worker, 3},
                {run, 4},
                {http, 5} % for mochiweb
        ]},
        {web_server_opts, [
            {id, "test_yaws"},
            {docroot, "%ROOT%/var/www/01/www"},
            {sconf, [
                {docroot0, "/"},
                {port, 8143},
                {listen, {0,0,0,0}},
                {ebin_dir, ["%ROOT%/var/www/01/ebin"]},
                %{appmods, [{"/", my_appmod}]},
                %{servername, "host3"},
                {ssl0, [
                    {certfile, "%ROOT%/var/www/01/conf/ssl/localhost-cert.pem"},
                    {keyfile, "%ROOT%/var/www/01/conf/ssl/localhost-key.pem"}
                ]},
                {flags, [
                    {dir_listings, true}
                ]}
            ]},
            {gconf, [
                {yaws_dir, "%ROOT%/lib/yaws-1.91"},
                {logdir, "%ROOT%/var/log/erpher/yaws"},
                {ebin_dir, ["%ROOT%/usr/lib/yaws/custom/ebin"]},
                {include_dir, ["%ROOT%/usr/lib/yaws/custom/include"]},
                {max_connections, nolimit},
                {trace, false},
                {copy_error_log, true},
                {log_wrap_size, 1000000},
                {log_resolve_hostname, false},
                {fail_on_bind_err, true},
                {auth_log, true},
                {id, eworkman_yaws},
                {pick_first_virthost_on_nomatch, true},
                {use_fdsrv, false},
                {subconfigdir, "%ROOT%/var/www/01/conf"}
            ]}
        ]},
        {pools0, [
            [
                {id, p1},
                {min_workers, 1}, % long lasting workers
                {restart_policy, delay},
                {restart_delay, 10}, % sec. Delay before restarting the crashed worker
                {worker_duration, 60}, % seconds. Time before terminate
                {worker, [
                    {name, "/usr/bin/perl -Mstrict -w /etc/erpher/workers/t.pl"},
                    {debug,
                        [
                            {run, 4}
                        ]
                    }]}
            ],
            [
                {id, p2},
                {min_workers, 2}, % long lasting workers
                {worker_duration, 300}, % seconds. Time before terminate
                {worker, [
                    {name, "/etc/erpher/workers/test.sh"},
                    {debug,
                        [
                            {run, 4}
                        ]
                    }]}
            ]
        ]}
    ]}, % eworkman
    {ecomet, [
        {log_stat_interval, 60},
        {sockjs_config, [
                % ignored path items before sid. Include tag and server parts
                {sid_ignore_tokens, 2},
                {tag, ecomet},
                {port, 8085}
                ]
        },
        {socketio_config, [
                {port, 8085}
                ]
        },
        {log0, "%ROOT%/var/log/erpher/e"},
        {lp_check_interval, 1002}, % milliseconds
        {lp_yaws_request_timeout, 301}, % seconds. Time to terminate yaws long poll processes
        {lp_yaws_check_interval, 1001}, % milliseconds
        {debug, [
                {child, 2},
                {http, 1},
                {run, 2}
            ]
        },
        {child_config, [
            {economize, memory}, % memory, cpu
            {deep_memory_economize, true}, % call gc
            {user_data_as_auth_host, true}, % user field of url as auth host
            {idle_timeout0, 681}, % seconds. Idle (no any data) time before exit
            {sio_auth_recheck_interval, 61}, % seconds
            {lp_request_timeout, 300}, % seconds. Time to delete old lp requests
            {qmax_dur, 600200100}, % microseconds
            {qmax_len, 500},
            {http_connect_timeout, 15000},
            {http_timeout, 60000},
            {debug, [
                    {stat, 0},
                    {rb_msg, 0}, % rabbit messages
                    {web_msg, 0}, % web messages
                    {ws, 0}, % web socket
                    {lp, 0}, % long poll
                    {http, 0}, % http request, response
                    {run, 2}
                ]
            }
        ]},
        {rabbit, [
                {port, 5672},
                {host, '127.0.0.1'},
                {user, <<"guest">>},
                {password, <<"guest">>},
                {vhost , <<"/">>},
                {exchange , <<"negacom">>},
                {exchange_base, <<"ecomet_">>},
                {exchange_type , <<"topic">>},
                {queue , <<"ec_queue_3">>},
                {routing_key , <<"test_event">>}
        ]},
        {yaws_config0, [
            {id, "test_yaws"},
            {docroot, "%ROOT%/var/www/01/www4"},
            {sconf, [
                {docroot0, "%ROOT%/var/www/01/www"},
                {port, 8184},
                {listen, {0,0,0,0}},
                {ebin_dir, ["%ROOT%/var/www/01/ebin"]},
                %{appmods, [{"/", my_appmod}]},
                {servername, "localhost"},
                {ssl0, [
                    % {certfile, "%ROOT%/var/www/01/conf/ssl/localhost-cert.pem"},
                    % {keyfile, "%ROOT%/var/www/01/conf/ssl/localhost-key.pem"}
                    {certfile, "%ROOT%/var/www/01/conf/ssl/192.168.9.138.crt"},
                    {keyfile, "%ROOT%/var/www/01/conf/ssl/192.168.9.138.key"}
                ]},
                {flags, [
                    {dir_listings, true}
                ]}
            ]},
            {gconf, [
                {yaws_dir, "%ROOT%/lib/yaws-1.91"},
                {logdir, "%ROOT%/var/log/erpher/yaws"},
                {ebin_dir, ["%ROOT%/usr/lib/yaws/custom/ebin"]},
                {include_dir, ["%ROOT%/usr/lib/yaws/custom/include"]},
                {max_connections, nolimit},
                {trace, false},
                {copy_error_log, true},
                {log_wrap_size, 1000000},
                {log_resolve_hostname, false},
                {fail_on_bind_err, true},
                {auth_log, true},
                {id, ecomet_yaws},
                {pick_first_virthost_on_nomatch, true},
                {use_fdsrv, false},
                {subconfigdir, "%ROOT%/var/www/01/conf"}
            ]} % gconf
        ]} % yaws config
    ]} % ecomet server
].
